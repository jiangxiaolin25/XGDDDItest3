package com.xinguodu.cts;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import com.xinguodu.ddiinterface.Ddi;

import android.app.Activity;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemSelectedListener;
import tools.testtoolclass;

public class XitongActivity extends Activity {

	private TextView tv;
	private TextView tv1;
	private Button bt1;
	private Spinner spinner;
	private ScrollView scrollView;
	private boolean Btflg = false;
	private boolean Thflg = true;
	private long TotalCount = 0;
	private long SucessCount = 0;
	private long Failcount = 0;
	private long SucessRate = 0;
	private TextView mTotalTextView = null;
	private TextView mSucessTextView = null;
	private TextView mFailTextView = null;
	private TextView mSucessRateTextView = null;
	private byte[] lpOut;

	private Thread mThread = new Thread(new Runnable() {

		@Override
		public void run() {
			while (Thflg) {
				if (Btflg) {
					testReadsn();
					testfirmwarever1();
					testfirmwarever2();
					testfirmwarever3();
					testbatstatus();
					if ( MainActivity.model.equalsIgnoreCase("F900")||MainActivity.model.equalsIgnoreCase("EF900") ) {
						myHandleDeal(MainActivity.model+"没有主电池测试失败", -99);
					}else {
						testmainBatstatus();
					}
					testsettimeout();
					testgettimeout();
					testsetbeep();
					testsetbeep1();
					
					testgetchipID();
					// testBodyNumberdownload();
					// testBodyNumberread();
					testrebootmode();
					testsetrtctime();
					testgetrtctime();
					testrtctime1();
					testrtctime2();
					testrtctime3();
					testrtctime4();
					testrtctime5();
					testrtctime6();
					testrtctime7();
					testrtctime8();
					testrtctime9();
					testrtctime10();
					testrtctime11();
					testrtctime12();
					testrtctime13();
					testrtctime14();
					testrtctime15();
					testrtctime16();
					testrtctime17();
					testrtctime18();
					testgetstatus();
//					******************获取随机数
					testgetrand1();
					testgetrand2();
					testgetrand3();
					testgetrand4();
					testgetrand5();
					testgetrand6();
					testgetrand7();
					testgetrand8();
					testgetrand9();
//					*******************
					testdebugStatus();
					testsetCertHash();
					testJHPinpad();
					testJL();
					testrtctime19();
//					testgethardver1();
//					testgetmode1();
//					testgetddiver1();
//					testopenprot1();
					testsystime1();
					if ((MainActivity.model.equalsIgnoreCase("F900"))||(MainActivity.model.equalsIgnoreCase("EF900"))) {
						myHandleDeal(MainActivity.model+"不支持磁卡测试失败", -99);
					}else {
						testcard2();
						testcard3();
						//压力测试 
						//					testsetbeep2();
						testcard1();
						testcard4();
						testcard5();
						testcard6();
						testcard7();
						testcard8();
						testcard9();
						testcard10();
					}
					testend();
					Btflg = false;
				}
			}
		}
	});
	// 根据返回值对比在哪里显示
	private Handler myHandler = new Handler() {
		public void handleMessage(Message msg) {
			String infoString = msg.obj.toString() + " 返回值: " + msg.arg1;
			if (infoString.contains("test")) {
				TotalCount++;
				tv.append(" " + msg.obj.toString() + "\n");
			} else {
				if (infoString.contains("失败")) {
					Failcount++;
					tv1.append("   " + infoString + "\n");
				} else {
					tv.append("   " + infoString + "\n");
				}
			}
			scrollToBottom();
			SucessCount = TotalCount - Failcount;
			SucessRate = (SucessCount * 100) / TotalCount;
			mTotalTextView.setText("总次数:" + TotalCount);
			mSucessTextView.setText("成功:" + SucessCount);
			mFailTextView.setText("失败:" + Failcount);
			mSucessRateTextView.setText("成功率:" + SucessRate + "%");
		}
	};

	private void scrollToBottom() {
		scrollView.post(new Runnable() {
			public void run() {
				scrollView.smoothScrollTo(0, tv.getBottom());
			}
		});
	}

	// 显示在UI界面显示测试用例的名称
	private void myHandleDeal(String info, int ret) {
		try {
			testtoolclass.creatcsv(ret, info);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
//		StringBuilder sb1 = new StringBuilder(1025);
		Message myMessage = myHandler.obtainMessage();
		myMessage.obj = info;
		myMessage.arg1 = ret;
		myHandler.sendMessage(myMessage);
//		sb1.append(info + "  " + ret + ",\r\n");
//		// Log.v("print", sb1.toString());
//		String filepath = "/mnt/sdcard/test.txt";
//		File file = new File(filepath);
//		if (!file.exists()) {
//			try {
//				file.delete();
//				file.createNewFile();
//			} catch (IOException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//		}
//
//		try {
//			FileOutputStream fo = new FileOutputStream(file, true);
//			fo.write(sb1.toString().getBytes());
//			fo.close();
//		} catch (Exception e) {
//			e.printStackTrace();
//		}

	}

	Ddi Ddi = new Ddi();

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);// 去掉标题栏
		setContentView(R.layout.activity_xitong);
		lpOut = new byte[20];
		Ddi.ddi_ddi_sys_init();// 仅仅是加载一个服务，相当于加载K21的服务
		initview();
		mThread.start();
		run();
	}

	private void initview() {
		tv = (TextView) findViewById(R.id.xttv);
		tv1 = (TextView) findViewById(R.id.xttv1);
		bt1 = (Button) findViewById(R.id.xtbt1);
		spinner = (Spinner) findViewById(R.id.xtspinner);
		scrollView = (ScrollView) findViewById(R.id.xtscrollView);
		mTotalTextView = (TextView) findViewById(R.id.xttext_total);
		mSucessTextView = (TextView) findViewById(R.id.xttext_sucess);
		mFailTextView = (TextView) findViewById(R.id.xttext_fail);
		mSucessRateTextView = (TextView) findViewById(R.id.xttext_sucess_rate);
	}

	private void run() {
		bt1.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				if (Btflg) {
					Toast.makeText(getApplicationContext(), "测试中，请等待", Toast.LENGTH_SHORT).show();
					// Btflg = false;
				} else {
					Btflg = true;
				}
			}
		});
		spinner.setOnItemSelectedListener(new OnItemSelectedListener() {
			@Override
			public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {
				if (Btflg) {
					Toast.makeText(getApplicationContext(), "测试中，请等待", Toast.LENGTH_SHORT).show();
				} else {
					tv.setText("");
					switch (pos) {
					case 1:
						testReadsn();
						break;
					case 2:
						testfirmwarever1();
						break;
					case 3:
						testfirmwarever2();
						break;
					case 4:
						testbatstatus();
						break;
					case 5:
						testmainBatstatus();
						break;
					case 6:
						testsettimeout();
						break;
					case 7:
						testgettimeout();
						break;
					case 8:
						testsetbeep();
						break;
					case 9:
						testgetchipID();
						break;
					case 10:
						testcard1();
						break;
					case 11:
						testcard2();
						break;
					case 12:
						testsetrtctime();
						break;
					case 13:
						testgetrtctime();
						break;
					case 14:
						testrtctime1();
						break;
					case 15:
						testrtctime2();
						break;
					case 16:
						testrtctime3();
						break;
					case 17:
						testrtctime4();
						break;
					case 18:
						testrtctime5();
						break;
					case 19:
						testrtctime6();
						break;
					case 20:
						testrtctime7();
						break;
					case 21:
						testrtctime8();
						break;
					case 22:
						testrtctime9();
						break;
					case 23:
						testrtctime10();
						break;
					case 24:
						testrtctime11();
						break;
					case 25:
						testrtctime12();
						break;
					case 26:
						testrtctime13();
						break;
					case 27:
						testrtctime14();
						break;
					case 28:
						testrtctime15();
						break;
					case 29:
						testrtctime16();
						break;
					case 30:
						testrtctime17();
						break;
					case 31:
						testrtctime18();
						break;
					case 32:
						testgetstatus();
						break;
					case 33:
						testgetrand1();
						break;
					case 34:
						testgetrand2();
						break;
					case 35:
						testgetrand3();
						break;
					case 36:
						testgetrand4();
						break;
					case 37:
						testdebugStatus();
						break;
					case 38:
						testsetCertHash();
						break;
					case 39:
						testJHPinpad();
						break;
					case 40:
						testJL();
						break;
					case 41:
						testrtctime19();
						break;
					case 42:
						testrebootmode();
						break;
					case 43:
						testcard3();
						break;
					case 44:
						testcard4();
						break;
					case 45:
						testcard5();
						break;
					case 46:
						testcard6();
						break;
					case 47:
						testcard7();
						break;
					case 48:
						testfirmwarever3();
						break;
					case 49:
						testgethardver1();
						break;
					case 50:
						testgetmode1();
						break;
					case 51:
						testgetddiver1();
						break;
					case 52:
						testopenprot1();
						break;
					case 53:
						testsystime1();
						break;
					case 54:
						testgetrand5();
						break;
					case 55:
						testgetrand6();
						break;
					case 56:
						testgetrand7();
						break;
					case 57:
						testgetrand8();
						break;
					case 58:
						testgetrand9();
						break;
					case 59:
						testsetbeep1();
						break;
					case 60:
						testsetbeep2();
						break;
					case 61:
						testcard8();
						break;
					case 62:
						testcard9();
						break;
					case 63:
						testcard10();
						break;
						
					
						
					// pointB
					default:
						break;
					}
				}
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
				// Another interface callback
			}
		});
	}

	private void testReadsn() {
		myHandleDeal("testReadsn测试", 0);
		int res = Ddi.ddi_sys_read_dsn(lpOut);
		String data = ByteUtils.asciiByteArray2String(lpOut);
		if (res == 0) {
			myHandleDeal("读取机身号成功:" + data, res);
		} else {
			myHandleDeal("Readsn读取机身号失败", res);
		}
	}
	


	// 读取boot版本
	private void testfirmwarever1() {
		myHandleDeal("testfirmwarever1测试", 0);

		int nType = 0;
		int res = Ddi.ddi_sys_get_firmwarever(lpOut, nType);
		String str = ByteUtils.asciiByteArray2String(lpOut);
		if (res == 0) {
			myHandleDeal("读取BOOT版本成功:" + str, res);
		} else {
			myHandleDeal("firmwarever1读取BOOT版本失败", res);
		}
	}

	private void testfirmwarever2() {
		myHandleDeal("testfirmwarever2测试", 0);
		int nType = 2;
		int res = Ddi.ddi_sys_get_firmwarever(lpOut, nType);
		String str = ByteUtils.asciiByteArray2String(lpOut);

		if (res == 0) {
			myHandleDeal("读取CORE版本成功:" + str, res);
		} else {
			myHandleDeal("firmwarever2读取CORE版本失败", res);
		}
	}

	// 异常读取
	private void testfirmwarever3() {
		myHandleDeal("testfirmwarever3测试", 0);
		int nType = 1;
		int res = Ddi.ddi_sys_get_firmwarever(lpOut, nType);
		String str = ByteUtils.asciiByteArray2String(lpOut);

		if (res == 0) {
			myHandleDeal("读取CORE版本成功:" + str, res);
		} else {
			myHandleDeal("firmwarever3读取CORE版本失败", res);
		}
	}

	private void testend() {
		myHandleDeal("testrunall测试结束", 0);
	}

	private void testbatstatus() {
		myHandleDeal("testbatstatus测试", 0);
		int res = Ddi.ddi_sys_bat_status();
		if (res > 0) {
			myHandleDeal("纽扣电池电压:" + res, res);
		} else {
			myHandleDeal("batstatus读取纽扣电池电压失败", res);
		}
	}

	private void testmainBatstatus() {
		myHandleDeal("testmainBatstatus测试", 0);
		int res = Ddi.ddi_sys_mainBat_status();
		if (res > 0) {
			myHandleDeal("主电池电压:" + res, res);
		} else {
			myHandleDeal("batstatus读取主电池电压失败", res);
		}
	}

	private void testsettimeout() {
		myHandleDeal("testsettimeout测试", 0);
		int res = Ddi.ddi_sys_set_timeout(5000);
		if (res == 0) {
			myHandleDeal("设置K21超时时间成功", res);
		} else {
			myHandleDeal("settimeout设置K21超时时间失败", res);
		}
	}

	private void testgettimeout() {
		myHandleDeal("testgettimeout测试", 0);
		int[] lpOut = new int[1];
		int res = Ddi.ddi_sys_get_timeout(lpOut);
		int str = lpOut[0];
		if (res == 0) {
			myHandleDeal("获取K21超时时间成功：" + str, res);
		} else {
			myHandleDeal("gettimeout获取K21超时时间失败", res);
		}
	}

	private void testsetbeep() {
		myHandleDeal("testsetbeep测试", 0);
		int res = Ddi.ddi_sys_set_beep(10*1000);
		if (res == 0) {
			myHandleDeal("setbeep蜂鸣器测试成功", res);
		} else {
			myHandleDeal("setbeep测试失败", res);
		}
	}
	private void testsetbeep1() {
		myHandleDeal("testsetbeep1测试", 0);
		int res = Ddi.ddi_sys_set_beep(10);
		if (res == 0) {
			myHandleDeal("setbeep1蜂鸣器测试成功", res);
		} else {
			myHandleDeal("setbeep1测试失败", res);
		}
	}
	private void testsetbeep2() {
		myHandleDeal("testsetbeep2测试", 0);
		Runnable runnable = new Runnable() {
			public void run() {
				for (int i = 0; i < 200; i++) {
					int res = Ddi.ddi_sys_set_beep(10);
					if (res == 0) {
						myHandleDeal("setbeep2蜂鸣器测试成功" + i, res);
					} else {
						myHandleDeal("setbeep2测试失败" + i, res);
					}
				}
			}
		};
		Thread setbeep2 = new Thread(runnable);
		setbeep2.start();
		try {
			setbeep2.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void testgetchipID() {
		myHandleDeal("testgetchipID测试", 0);
		byte[] lpOut = new byte[17];
		int res = Ddi.ddi_sys_get_chipID(lpOut);
		String str = ByteUtils.byteArray2HexString(lpOut);
		if (res == 0) {
			myHandleDeal("读取K21芯片ID成功:" + str, res);
		} else {
			myHandleDeal("getchipID读取K21芯片ID失败", res);
		}
	}

	private void testgethardver1() {
		myHandleDeal("testgethardver1测试", 0);
//		byte[] lpOut = new byte[17];
		int res = Ddi.ddi_sys_get_Hardware_Ver();
//		String str = ByteUtils.byteArray2HexString(lpOut);
		if (res == 0) {
			myHandleDeal("gethardver1成功:", res);
		} else {
			myHandleDeal("gethardver1失败", res);
		}
	}

	private void testgetddiver1() {
		myHandleDeal("testgetddiver1测试", 0);
		byte[] lpOut = new byte[17];
		int res = Ddi.ddi_sys_get_Hardware_Ver();
		String str = ByteUtils.byteArray2HexString(lpOut);
		if (res == 0) {
			myHandleDeal("getetddiver1成功:" + str, res);
		} else {
			myHandleDeal("getetddiver1失败", res);
		}
	}

	private void testgetmode1() {
		myHandleDeal("testgetmode1测试", 0);
//		byte[] lpOut = new byte[17];
		int res = Ddi.ddi_get_model();
//		String str = ByteUtils.byteArray2HexString(lpOut);
		if (res == -5) {
			myHandleDeal("getmode1成功:", res);
		} else {
			myHandleDeal("getmode1失败", res);
		}
	}

	/***
	 * 
	 */
	private void testsystime1() {
		myHandleDeal("testsystime1测试", 0);
		int[] lpOut = new int[17];
		int res = Ddi.ddi_sys_getSystemTime(lpOut);
//		String str = ByteUtils.intarr2int(lpOut);
		if (res == 0) {
			myHandleDeal("systime1成功:", res);
		} else {
			myHandleDeal("systime1失败", res);
		}
	}

	private void testopenprot1() {
		myHandleDeal("testgetmode1测试", 0);
//		byte[] lpOut = new byte[17];
		int res = Ddi.ddi_open_port();
//		String str = ByteUtils.byteArray2HexString(lpOut);
		if (res == 0) {
			myHandleDeal("openprot1成功:", res);
		} else {
			myHandleDeal("openprot1失败", res);
		}
	}

	// /*
	// *下载机身号
	// * -2代表下载失败了
	// * 0表示下载成功了
	// * 需要串口下载数据，循环执行接口
	// */
	// private void testBodyNumberdownload(){
	// myHandleDeal("testBodyNumberdownload测试",0);
	// int res = Ddi.ddi_BodyNumber_process_download();
	// if(res==-1){
	// myHandleDeal("下载机身号接口测试成功",res);
	// }else{
	// myHandleDeal("BodyNumberdownload下载机身号接口测试失败",res);
	// }
	// }

	/*
	 * 读取机身号 -2代表读取失败了 0表示读取成功了 需要串口读取数据，循环执行接口
	 */
	// private void testBodyNumberread(){
	// myHandleDeal("testBodyNumberread测试",0);
	// int res = Ddi.ddi_BodyNumber_process_serial_read();
	// if(res==-1){
	// myHandleDeal("读取机身号接口测试成功",res);
	// }else{
	// myHandleDeal("BodyNumberread读取机身号接口测试失败",res);
	// }
	// }

	/*
	 * 让k21进入download模式 //在N5S上已经不用了，不用测试，结果不用判断
	 */
	private void testrebootmode() {
		myHandleDeal("testrebootmode测试", 0);
		int res = Ddi.ddi_k21_reboot_to_upgrade_mode();
		if (res == -1) {
			myHandleDeal("读取机身号接口测试成功", res);
		} else {
			myHandleDeal("rebootmode读取机身号接口测试失败", res);
		}
	}

	/*
	 * 设置k21RTC时间
	 */
	private void testsetrtctime() {
		myHandleDeal("testsetrtctime测试", 0);
		String DT = "180605180357";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res == 0) {
			myHandleDeal("设置K21RTC成功:" + DT, res);
		} else {
			myHandleDeal("setrtctime设置K21RTC失败", res);
		}
	}

	/*
	 * 读取k21RTC时间
	 */
	private void testgetrtctime() {
		myHandleDeal("testgetrtctime测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		int res = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res);
		} else {
			myHandleDeal("setrtctime读取K21RTC失败", res);
		}
	}

	/*
	 * 设置、读取k21RTC时间
	 */
	private void testrtctime1() {
		myHandleDeal("testrtctime1测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "700101000001";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == 0) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime1设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime1读取K21RTC失败", res2);
		}
	}

	private void testrtctime2() {
		myHandleDeal("testrtctime2测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "371231235559";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == 0) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime2设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime2读取K21RTC失败", res2);
		}
	}

	private void testrtctime3() {
		myHandleDeal("testrtctime3测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "170132000001";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == -6) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime3设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime3读取K21RTC失败", res2);
		}
	}

	private void testrtctime4() {
		myHandleDeal("testrtctime4测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "170229235959";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == -6) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime4设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime4读取K21RTC失败", res2);
		}
	}

	private void testrtctime5() {
		myHandleDeal("testrtctime5测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "170229235959";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == -6) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime5设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime5读取K21RTC失败", res2);
		}
	}

	private void testrtctime6() {
		myHandleDeal("testrtctime6测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "170230235959";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == -6) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime6设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime6读取K21RTC失败", res2);
		}
	}

	private void testrtctime7() {
		myHandleDeal("testrtctime7测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "170229235959";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == -6) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime7设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime7读取K21RTC失败", res2);
		}
	}

	private void testrtctime8() {
		myHandleDeal("testrtctime8测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "170620230101";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == 0) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime8设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime8读取K21RTC失败", res2);
		}
	}

	private void testrtctime9() {
		myHandleDeal("testrtctime9测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "170620206001";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == -6) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime9设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime9读取K21RTC失败", res2);
		}
	}

	private void testrtctime10() {
		myHandleDeal("testrtctime10测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "170620205560";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == -6) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime10设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime10读取K21RTC失败", res2);
		}
	}

	private void testrtctime11() {
		myHandleDeal("testrtctime11测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "711231235959";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == 0) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime11设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime11读取K21RTC失败", res2);
		}
	}

	private void testrtctime12() {
		myHandleDeal("testrtctime12测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "170229235959";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == -6) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime12设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime12读取K21RTC失败", res2);
		}
	}

	private void testrtctime13() {
		myHandleDeal("testrtctime13测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "170228235959";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == 0) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime13设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime13读取K21RTC失败", res2);
		}
	}

	private void testrtctime14() {
		myHandleDeal("testrtctime14测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "170331235959";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == 0) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime14设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime14读取K21RTC失败", res2);
		}
	}

	private void testrtctime15() {
		myHandleDeal("testrtctime15测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "170430235959";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == 0) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime15设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime15读取K21RTC失败", res2);
		}
	}

	private void testrtctime16() {
		myHandleDeal("testrtctime16测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "371231235959";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == 0) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime16设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime16读取K21RTC失败", res2);
		}
	}

	private void testrtctime17() {
		myHandleDeal("testrtctime17测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "371231235959";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == 0) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime17设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime17读取K21RTC失败", res2);
		}
	}

	private void testrtctime18() {
		myHandleDeal("testrtctime18测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		String DT = "170922083000";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		if (res1 == 0) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime18设置K21RTC失败", res1);
		}
		int res2 = Ddi.ddi_dev_get_rtc_time(Dt1, len1);
		String str = ByteUtils.byteArray2HexString(Dt1);
		if (res2 == 0) {
			myHandleDeal("读取K21RTC成功：" + str, res2);
		} else {
			myHandleDeal("rtctime18读取K21RTC失败", res2);
		}
	}

	// 异常测试 设置RTC异常时间
	private void testrtctime19() {
		myHandleDeal("testrtctime19测试", 0);
		byte[] Dt1 = new byte[6];
		int[] len1 = new int[1];
		// 月异常
		String DT = "171322083000";
		byte[] Dt = ByteUtils.hexString2ByteArray(DT);
		// 日异常
		String DT1 = "170933083000";
		byte[] Dt11 = ByteUtils.hexString2ByteArray(DT1);
		// 时异常
		String DT2 = "170922363000";
		byte[] Dt12 = ByteUtils.hexString2ByteArray(DT2);
		// 分异常
		String DT3 = "170922066900";
		byte[] Dt13 = ByteUtils.hexString2ByteArray(DT3);
		// 秒异常
		String DT4 = "170922060969";

		byte[] Dt14 = ByteUtils.hexString2ByteArray(DT4);
		int res1 = Ddi.ddi_dev_set_rtc_time(Dt, Dt.length);
		int res2 = Ddi.ddi_dev_set_rtc_time(Dt11, Dt11.length);
		int res3 = Ddi.ddi_dev_set_rtc_time(Dt12, Dt12.length);
		int res4 = Ddi.ddi_dev_set_rtc_time(Dt13, Dt13.length);
		int res5 = Ddi.ddi_dev_set_rtc_time(Dt14, Dt14.length);

		if (res1 == -6 && res2 == -6 && res3 == -6 && res4 == -6 && res5 == -6) {
			myHandleDeal("设置K21RTC成功:" + DT, res1);
		} else {
			myHandleDeal("rtctime18设置K21RTC失败" + res1 + res2 + res3 + res4 + res5, res1);
		}

	}

	// 测试磁卡用例
	private void testcard1() {
		myHandleDeal("testcard1测试", 0);

		Thread mThread = new Thread(new Runnable() {
			public void run() {
				for (int i = 0; i < 200; i++) {
					int res = Ddi.ddi_mag_open();
					if (res == 0) {
						myHandleDeal("card1磁卡打开成功", res);
						int res1 = Ddi.ddi_mag_close();
						if (res1 == 0) {
							myHandleDeal("card1磁卡关闭成功", res1);

						} else {
							myHandleDeal("card1磁卡关闭失败", res1);
						}

					} else {
						myHandleDeal("card1磁卡打开失败", res);
					}

				}
			}
		});
		mThread.start();
		try {
			mThread.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// 获取磁卡版本
	private void testcard2() {
		String model = android.os.Build.MODEL;
		myHandleDeal("testcard2测试", 0);
		byte[] mbyte = new byte[17];
		// N5S 磁头版本
		String card2dataN5S = "564330434e4d4147313630363135353035";
		// N6 磁头版本
		String card2dataN6 = "563536434e4d4147313830333132303033";

		int res = Ddi.ddi_mag_open();
		if (res == 0) {
			myHandleDeal("card2磁卡打开成功", res);

		} else {
			myHandleDeal("card2获取磁卡版本磁卡打开失败", res);
		}
		// 获取磁卡版本
		int res2 = Ddi.ddi_mag_ioctl_getVer(mbyte);
		String byteArray2HexString = ByteUtils.byteArray2HexString(mbyte);
		Log.v("111111", byteArray2HexString);
		if (model.equalsIgnoreCase("N5")) {
			if (res2 == 0 && card2dataN5S.equalsIgnoreCase(byteArray2HexString)) {
				myHandleDeal("card2获取版本成功", res2);
				int res1 = Ddi.ddi_mag_close();
				if (res1 == 0) {
					myHandleDeal("card2磁卡关闭成功", res1);

				} else {
					myHandleDeal("card2磁卡关闭失败", res1);
				}

			} else {
				myHandleDeal("card2获取磁头版本失败" + byteArray2HexString, res2);
			}
		} else {

			if (res2 == 0 && card2dataN6.equalsIgnoreCase(byteArray2HexString)) {
				myHandleDeal("card2获取版本成功", res2);
				int res1 = Ddi.ddi_mag_close();
				if (res1 == 0) {
					myHandleDeal("card2磁卡关闭成功", res1);

				} else {
					myHandleDeal("card2磁卡关闭失败", res1);
				}

			} else {
				myHandleDeal("card2获取磁头版本失败" + byteArray2HexString, res2);
			}

		}
	}

	private void testcard3() {
		myHandleDeal("testcard3测试", 0);
//		byte[] mbyte = new byte[17];
//		String card2data = "564330434e4d4147313630363135353035";

		int res = Ddi.ddi_mag_open();
		if (res == 0) {
			myHandleDeal("card3磁卡打开成功", res);

		} else {
			myHandleDeal("card3磁卡打开失败", res);
		}
		// 清除读卡器数据
		int res2 = Ddi.ddi_mag_clear();
		if (res2 == 0) {
			myHandleDeal("card3清除数据成功", res2);
			int res1 = Ddi.ddi_mag_close();
			if (res1 == 0) {
				myHandleDeal("card3磁卡关闭成功", res1);

			} else {
				myHandleDeal("card3磁卡关闭失败", res1);
			}

		} else {
			myHandleDeal("card3清除数据失败", res2);
		}
	}

	// IC卡上下电测试
	// 测试磁卡用例
	private void testcard4() {
		myHandleDeal("testcard4测试", 0);

		Thread mThread = new Thread(new Runnable() {
			public void run() {
				for (int i = 0; i < 200; i++) {
					int res = Ddi.ddi_iccpsam_open(0);
					if (res == 0) {
						myHandleDeal("card4打开成功", res);
						int res1 = Ddi.ddi_iccpsam_close(0);
						if (res1 == 0) {
							myHandleDeal("card4关闭成功", res1);

						} else {
							myHandleDeal("card4磁卡关闭失败", res1);
						}

					} else {
						myHandleDeal("card4磁卡打开失败", res);
					}

				}
			}
		});
		mThread.start();
		try {
			mThread.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// IC卡上下电测试
	// 测试磁卡用例
	private void testcard5() {
		
		
		myHandleDeal("testcard5测试", 0);

		Thread mThread = new Thread(new Runnable() {
			public void run() {
				for (int i = 0; i < 200; i++) {
					int res = Ddi.ddi_iccpsam_open(1);
					if (res == 0) {
						myHandleDeal("card5打开成功", res);
						int res1 = Ddi.ddi_iccpsam_close(1);
						if (res1 == 0) {
							myHandleDeal("card5关闭成功", res1);

						} else {
							myHandleDeal("card5磁卡关闭失败", res1);
						}

					} else {
						myHandleDeal("card5磁卡打开失败", res);
					}

				}
			}
		});
		mThread.start();
		try {
			mThread.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void testcard6() {
		myHandleDeal("testcard6测试", 0);

		Thread mThread = new Thread(new Runnable() {
			public void run() {
				for (int i = 0; i < 200; i++) {
					int res = Ddi.ddi_iccpsam_open(2);
					if (res == 0) {
						myHandleDeal("card6打开成功", res);
						int res1 = Ddi.ddi_iccpsam_close(2);
						if (res1 == 0) {
							myHandleDeal("card6关闭成功", res1);

						} else {
							myHandleDeal("card6磁卡关闭失败", res1);
						}

					} else {
						myHandleDeal("card6磁卡打开失败", res);
					}

				}
			}
		});
		mThread.start();
		try {
			mThread.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void testcard7() {
		myHandleDeal("testcard测试", 0);

		Thread mThread = new Thread(new Runnable() {
			public void run() {
				for (int i = 0; i < 200; i++) {
					int res = Ddi.ddi_rf_poweron(2);
					if (res == 0) {
						myHandleDeal("card7打开成功", res);
						int res1 = Ddi.ddi_rf_poweroff();
						if (res1 == 0) {
							myHandleDeal("card7关闭成功", res1);

						} else {
							myHandleDeal("card7磁卡关闭失败", res1);
						}

					} else {
						myHandleDeal("card7磁卡打开失败", res);
					}

				}
			}
		});
		mThread.start();
		try {
			mThread.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void testcard8() {
		myHandleDeal("testcard8测试", 0);

		Thread mThread = new Thread(new Runnable() {
			public void run() {
				for (int i = 0; i < 200; i++) {
					int res = Ddi.ddi_rf_poweron(1);
					if (res == 0) {
						myHandleDeal("card8打开成功", res);
						int res1 = Ddi.ddi_rf_poweroff();
						if (res1 == 0) {
							myHandleDeal("card8关闭成功", res1);

						} else {
							myHandleDeal("card8磁卡关闭失败", res1);
						}

					} else {
						myHandleDeal("card8磁卡打开失败", res);
					}

				}
			}
		});
		mThread.start();
		try {
			mThread.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void testcard9() {
		myHandleDeal("testcard9测试", 0);

		Thread mThread = new Thread(new Runnable() {
			public void run() {
				for (int i = 0; i < 200; i++) {
					int res = Ddi.ddi_rf_poweron(0);
					if (res == -6) {
						myHandleDeal("card8打开成功", res);
						int res1 = Ddi.ddi_rf_poweroff();
						if (res1 == 0) {
							myHandleDeal("card9关闭成功", res1);

						} else {
							myHandleDeal("card9磁卡关闭失败", res1);
						}

					} else {
						myHandleDeal("card9磁卡打开失败", res);
					}

				}
			}
		});
		mThread.start();
		try {
			mThread.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void testcard10() {
		myHandleDeal("testcard10测试", 0);

		Thread mThread = new Thread(new Runnable() {
			public void run() {
				for (int i = 0; i < 200; i++) {
					int res = Ddi.ddi_led_open();
					if (res == 0) {
						myHandleDeal("card10打开成功", res);
						int res1 = Ddi.ddi_led_close();
						if (res1 == 0) {
							myHandleDeal("card10关闭成功", res1);

						} else {
							myHandleDeal("card10磁卡关闭失败", res1);
						}

					} else {
						myHandleDeal("card10磁卡打开失败", res);
					}

				}
			}
		});
		mThread.start();
		try {
			mThread.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void testgetstatus() {
		myHandleDeal("testgetstatus测试", 0);
		byte[] statusdata = new byte[20];
		int res = Ddi.ddi_security_getstatus(statusdata);
		if (res == 0) {
			myHandleDeal("获取安全状态成功", res);
		} else {
			myHandleDeal("getstatus获取安全状态失败", res);
		}
	}

	private void testgetrand1() {
		myHandleDeal("testgetrand1测试", 0);
		byte[] rand = new byte[4];
		int res = Ddi.ddi_security_rand(4, rand);
		String str = ByteUtils.byteArray2HexString(rand);
		if (res == 0&&str.length()!=0) {
			myHandleDeal("获取随机数成功：" + str, res);
		} else {
			myHandleDeal("getstatus获取安全状态失败", res);
		}
	}

	private void testgetrand2() {
		myHandleDeal("testgetrand2测试", 0);
		byte[] rand = new byte[100];
		int res = Ddi.ddi_security_rand(100, rand);
		String str = ByteUtils.byteArray2HexString(rand);
		if (res == 0) {
			myHandleDeal("获取随机数成功：" + str, res);
		} else {
			myHandleDeal("getrand2获取随机数失败"+str, res);
		}
	}

	private void testgetrand3() {
		myHandleDeal("testgetrand3测试", 0);
		byte[] rand = new byte[10];
		int res = Ddi.ddi_security_rand(9, rand);
		String str = ByteUtils.byteArray2HexString(rand);
		if (res == 0) {
			myHandleDeal("获取随机数成功：" + str, res);
		} else {
			myHandleDeal("getrand3获取随机数失败", res);
		}
	}

	private void testgetrand4() {
		myHandleDeal("testgetrand4测试", 0);
		byte[] rand = new byte[10];
		int res = Ddi.ddi_security_rand(11, rand);
		if (res == -10) {
			myHandleDeal("获取随机数测试成功", res);
		} else {
			myHandleDeal("getrand4获取随机数测试失败", res);
		}
	}

	//
	private void testgetrand5() {
		myHandleDeal("testgetrand5测试", 0);
		byte[] rand = new byte[512];
		int res = Ddi.ddi_security_rand(512, rand);
		String str = ByteUtils.byteArray2HexString(rand);
		if (res == 0) {
			myHandleDeal("getrand5获取随机数成功：", res);
		} else {
			myHandleDeal("getrand5获取随机数失败", res);
		}
	}
	
	private void testgetrand6() {
		myHandleDeal("testgetrand6测试", 0);
		byte[] rand = new byte[4];
		int res = Ddi.ddi_security_rand(4, rand);
		String str = ByteUtils.byteArray2HexString(rand);
		if (res == 0&&!str.equalsIgnoreCase("00000000")) {
			myHandleDeal("getrand6获取随机数成功：" + str, res);
		} else {
			myHandleDeal("getrand6获取随机数失败"+str, res);
		}
	}
	private void testgetrand7() {
		myHandleDeal("testgetrand7测试", 0);
		byte[] rand = new byte[2048];
		int res = Ddi.ddi_security_rand(2048, rand);
		String str = ByteUtils.byteArray2HexString(rand);
		if (res == 0) {
			myHandleDeal("getrand7获取随机数成功：" + str, res);
		} else {
			myHandleDeal("getrand7获取随机数失败", res);
		}
	}
	private void testgetrand8() {
		myHandleDeal("testgetrand8测试", 0);
		byte[] rand = new byte[2056];
		int res = Ddi.ddi_security_rand(2056, rand);
		String str = ByteUtils.byteArray2HexString(rand);
		if (res == -6) {
			myHandleDeal("getrand8获取随机数成功：" , res);
		} else {
			myHandleDeal("getrand8获取随机数失败", res);
		}
	}
	private void testgetrand9() {
		myHandleDeal("testgetrand9测试", 0);
		byte[] rand = new byte[0];
		int res = Ddi.ddi_security_rand(0, rand);
		String str = ByteUtils.byteArray2HexString(rand);
		if (res == -6) {
			myHandleDeal("getrand9获取随机数成功：" , res);
		} else {
			myHandleDeal("getrand9获取随机数失败"+str, res);
		}
	}

	private void testdebugStatus() {
		myHandleDeal("testdebugStatus测试", 0);
		int res = Ddi.ddi_get_debugStatus();
		if (res == 0) {
			myHandleDeal("获取设备模式成功：正式模式", res);
		} else if (res == 1) {
			myHandleDeal("获取设备模式成功：调试模式", res);
		} else {
			myHandleDeal("获取设备模式失败", res);
		}
	}

//终端有证书测试失败，需要删除证书
	private void testsetCertHash() {
		myHandleDeal("testsetCertHash测试", 0);
		byte[] hash = new byte[142];
		byte[] hash5 = { (byte) 0x73, (byte) 0x69, (byte) 0x67, (byte) 0x69, (byte) 0x73, (byte) 0x73, (byte) 0x75,
				(byte) 0x65, (byte) 0x72, (byte) 0x3d, (byte) 0x43, (byte) 0x49, (byte) 0x42, (byte) 0x20, (byte) 0x20,
				(byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20,
				(byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20,
				(byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20,
				(byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x20, (byte) 0x0d,
				(byte) 0x0a, (byte) 0x76, (byte) 0x65, (byte) 0x72, (byte) 0x73, (byte) 0x69, (byte) 0x6f, (byte) 0x6e,
				(byte) 0x3d, (byte) 0x32, (byte) 0x30, (byte) 0x31, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x31,
				(byte) 0x33, (byte) 0x31, (byte) 0x36, (byte) 0x34, (byte) 0x36, (byte) 0x0d, (byte) 0x0a, (byte) 0x68,
				(byte) 0x61, (byte) 0x73, (byte) 0x68, (byte) 0x31, (byte) 0x3d, (byte) 0x34, (byte) 0x46, (byte) 0x35,
				(byte) 0x43, (byte) 0x33, (byte) 0x36, (byte) 0x35, (byte) 0x31, (byte) 0x31, (byte) 0x42, (byte) 0x30,
				(byte) 0x45, (byte) 0x39, (byte) 0x41, (byte) 0x44, (byte) 0x32, (byte) 0x37, (byte) 0x34, (byte) 0x45,
				(byte) 0x39, (byte) 0x46, (byte) 0x41, (byte) 0x37, (byte) 0x43, (byte) 0x45, (byte) 0x36, (byte) 0x30,
				(byte) 0x43, (byte) 0x46, (byte) 0x35, (byte) 0x39, (byte) 0x41, (byte) 0x44, (byte) 0x38, (byte) 0x44,
				(byte) 0x39, (byte) 0x41, (byte) 0x41, (byte) 0x37, (byte) 0x34, (byte) 0x37, (byte) 0x36, (byte) 0x37,
				(byte) 0x41, (byte) 0x44, (byte) 0x43, (byte) 0x45, (byte) 0x31, (byte) 0x32, (byte) 0x36, (byte) 0x45,
				(byte) 0x36, (byte) 0x33, (byte) 0x46, (byte) 0x42, (byte) 0x45, (byte) 0x42, (byte) 0x35, (byte) 0x41,
				(byte) 0x34, (byte) 0x39, (byte) 0x35, (byte) 0x37, (byte) 0x39, (byte) 0x0d, (byte) 0x0a, (byte) 0x73,
				(byte) 0x69, (byte) 0x67, (byte) 0x3d, (byte) 0x35, (byte) 0x34, (byte) 0x39, (byte) 0x34, (byte) 0x39,
				(byte) 0x36, (byte) 0x30, (byte) 0x31, (byte) 0x45, (byte) 0x38, (byte) 0x37, (byte) 0x45, (byte) 0x36,
				(byte) 0x33, (byte) 0x34, (byte) 0x35, (byte) 0x37, (byte) 0x31, (byte) 0x41, (byte) 0x46, (byte) 0x34,
				(byte) 0x43, (byte) 0x34, (byte) 0x43, (byte) 0x45, (byte) 0x39, (byte) 0x44, (byte) 0x37, (byte) 0x39,
				(byte) 0x35, (byte) 0x46, (byte) 0x31, (byte) 0x45, (byte) 0x36, (byte) 0x43, (byte) 0x36, (byte) 0x37,
				(byte) 0x34, (byte) 0x36, (byte) 0x41, (byte) 0x45, (byte) 0x42, (byte) 0x43, (byte) 0x43, (byte) 0x43,
				(byte) 0x32, (byte) 0x31, (byte) 0x41, (byte) 0x46, (byte) 0x39, (byte) 0x37, (byte) 0x46, (byte) 0x30,
				(byte) 0x30, (byte) 0x36, (byte) 0x38, (byte) 0x43, (byte) 0x32, (byte) 0x35, (byte) 0x44, (byte) 0x42,
				(byte) 0x39, (byte) 0x36, (byte) 0x44, (byte) 0x36, (byte) 0x37, (byte) 0x41, (byte) 0x45, (byte) 0x32,
				(byte) 0x45, (byte) 0x38, (byte) 0x44, (byte) 0x34, (byte) 0x43, (byte) 0x31, (byte) 0x46, (byte) 0x32,
				(byte) 0x44, (byte) 0x44, (byte) 0x46, (byte) 0x34, (byte) 0x42, (byte) 0x38, (byte) 0x46, (byte) 0x43,
				(byte) 0x43, (byte) 0x34, (byte) 0x32, (byte) 0x42, (byte) 0x46, (byte) 0x46, (byte) 0x44, (byte) 0x30,
				(byte) 0x33, (byte) 0x41, (byte) 0x46, (byte) 0x32, (byte) 0x39, (byte) 0x31, (byte) 0x37, (byte) 0x32,
				(byte) 0x38, (byte) 0x41, (byte) 0x44, (byte) 0x31, (byte) 0x34, (byte) 0x39, (byte) 0x35, (byte) 0x43,
				(byte) 0x36, (byte) 0x46, (byte) 0x35, (byte) 0x41, (byte) 0x39, (byte) 0x39, (byte) 0x44, (byte) 0x32,
				(byte) 0x33, (byte) 0x32, (byte) 0x37, (byte) 0x36, (byte) 0x37, (byte) 0x32, (byte) 0x37, (byte) 0x32,
				(byte) 0x43, (byte) 0x31, (byte) 0x35, (byte) 0x42, (byte) 0x43, (byte) 0x44, (byte) 0x45, (byte) 0x33,
				(byte) 0x34, (byte) 0x41, (byte) 0x44, (byte) 0x39, (byte) 0x43, (byte) 0x32, (byte) 0x41, (byte) 0x45,
				(byte) 0x44, (byte) 0x45, (byte) 0x38, (byte) 0x32, (byte) 0x33, (byte) 0x32, (byte) 0x39, (byte) 0x39,
				(byte) 0x42, (byte) 0x33, (byte) 0x34, (byte) 0x35, (byte) 0x46, (byte) 0x44, (byte) 0x38, (byte) 0x43,
				(byte) 0x44, (byte) 0x36, (byte) 0x33, (byte) 0x37, (byte) 0x44, (byte) 0x31, (byte) 0x39, (byte) 0x39,
				(byte) 0x33, (byte) 0x45, (byte) 0x31, (byte) 0x38, (byte) 0x45, (byte) 0x35, (byte) 0x30, (byte) 0x39,
				(byte) 0x34, (byte) 0x33, (byte) 0x35, (byte) 0x42, (byte) 0x31, (byte) 0x30, (byte) 0x32, (byte) 0x35,
				(byte) 0x44, (byte) 0x37, (byte) 0x42, (byte) 0x42, (byte) 0x46, (byte) 0x33, (byte) 0x38, (byte) 0x38,
				(byte) 0x41, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x42, (byte) 0x30, (byte) 0x31, (byte) 0x46,
				(byte) 0x45, (byte) 0x37, (byte) 0x41, (byte) 0x32, (byte) 0x43, (byte) 0x39, (byte) 0x43, (byte) 0x39,
				(byte) 0x38, (byte) 0x33, (byte) 0x37, (byte) 0x44, (byte) 0x38, (byte) 0x30, (byte) 0x44, (byte) 0x30,
				(byte) 0x30, (byte) 0x35, (byte) 0x42, (byte) 0x41, (byte) 0x39, (byte) 0x33, (byte) 0x33, (byte) 0x32,
				(byte) 0x33, (byte) 0x31, (byte) 0x45, (byte) 0x30, (byte) 0x30, (byte) 0x33, (byte) 0x45, (byte) 0x37,
				(byte) 0x30, (byte) 0x33, (byte) 0x31, (byte) 0x44, (byte) 0x46, (byte) 0x43, (byte) 0x34, (byte) 0x38,
				(byte) 0x39, (byte) 0x35, (byte) 0x46, (byte) 0x32, (byte) 0x35, (byte) 0x45, (byte) 0x31, (byte) 0x31,
				(byte) 0x34, (byte) 0x34, (byte) 0x42, (byte) 0x32, (byte) 0x46, (byte) 0x43, (byte) 0x39, (byte) 0x38,
				(byte) 0x41, (byte) 0x37, (byte) 0x31, (byte) 0x43, (byte) 0x32, (byte) 0x42, (byte) 0x42, (byte) 0x42,
				(byte) 0x36, (byte) 0x33, (byte) 0x45, (byte) 0x44, (byte) 0x46, (byte) 0x43, (byte) 0x35, (byte) 0x41,
				(byte) 0x42, (byte) 0x35, (byte) 0x41, (byte) 0x46, (byte) 0x36, (byte) 0x43, (byte) 0x34, (byte) 0x31,
				(byte) 0x42, (byte) 0x30, (byte) 0x43, (byte) 0x36, (byte) 0x36, (byte) 0x38, (byte) 0x30, (byte) 0x46,
				(byte) 0x33, (byte) 0x41, (byte) 0x35, (byte) 0x31, (byte) 0x36, (byte) 0x42, (byte) 0x33, (byte) 0x32,
				(byte) 0x31, (byte) 0x39, (byte) 0x30, (byte) 0x39, (byte) 0x41, (byte) 0x45, (byte) 0x43, (byte) 0x32,
				(byte) 0x46, (byte) 0x30, (byte) 0x45, (byte) 0x36, (byte) 0x38, (byte) 0x42, (byte) 0x37, (byte) 0x32,
				(byte) 0x34, (byte) 0x36, (byte) 0x32, (byte) 0x35, (byte) 0x34, (byte) 0x37, (byte) 0x45, (byte) 0x30,
				(byte) 0x39, (byte) 0x31, (byte) 0x43, (byte) 0x41, (byte) 0x36, (byte) 0x38, (byte) 0x46, (byte) 0x30,
				(byte) 0x41, (byte) 0x39, (byte) 0x38, (byte) 0x39, (byte) 0x41, (byte) 0x37, (byte) 0x43, (byte) 0x45,
				(byte) 0x46, (byte) 0x41, (byte) 0x45, (byte) 0x37, (byte) 0x36, (byte) 0x37, (byte) 0x37, (byte) 0x41,
				(byte) 0x37, (byte) 0x46, (byte) 0x30, (byte) 0x46, (byte) 0x37, (byte) 0x44, (byte) 0x43, (byte) 0x43,
				(byte) 0x39, (byte) 0x35, (byte) 0x30, (byte) 0x38, (byte) 0x31, (byte) 0x32, (byte) 0x30, (byte) 0x38,
				(byte) 0x30, (byte) 0x42, (byte) 0x44, (byte) 0x45, (byte) 0x35, (byte) 0x38, (byte) 0x39, (byte) 0x41,
				(byte) 0x33, (byte) 0x31, (byte) 0x45, (byte) 0x42, (byte) 0x45, (byte) 0x30, (byte) 0x44, (byte) 0x43,
				(byte) 0x38, (byte) 0x42, (byte) 0x43, (byte) 0x31, (byte) 0x36, (byte) 0x31, (byte) 0x43, (byte) 0x31,
				(byte) 0x39, (byte) 0x42, (byte) 0x35, (byte) 0x42, (byte) 0x35, (byte) 0x34, (byte) 0x44, (byte) 0x31,
				(byte) 0x34, (byte) 0x31, (byte) 0x46, (byte) 0x42, (byte) 0x42, (byte) 0x45, (byte) 0x33, (byte) 0x38,
				(byte) 0x46, (byte) 0x35, (byte) 0x39, (byte) 0x39, (byte) 0x37, (byte) 0x34, (byte) 0x32, (byte) 0x34,
				(byte) 0x39, (byte) 0x42, (byte) 0x39, (byte) 0x35, (byte) 0x45, (byte) 0x38, (byte) 0x38, (byte) 0x43,
				(byte) 0x46, (byte) 0x41, (byte) 0x35, (byte) 0x41, (byte) 0x46, (byte) 0x42, (byte) 0x31, (byte) 0x33,
				(byte) 0x38, (byte) 0x32, (byte) 0x30, (byte) 0x31, (byte) 0x31, (byte) 0x44, (byte) 0x44, (byte) 0x30,
				(byte) 0x32, (byte) 0x35, (byte) 0x44, (byte) 0x42, (byte) 0x45, (byte) 0x36, (byte) 0x34, (byte) 0x32,
				(byte) 0x37, (byte) 0x34, (byte) 0x38, (byte) 0x46, (byte) 0x32, (byte) 0x32, (byte) 0x44, (byte) 0x41,
				(byte) 0x46, (byte) 0x42, (byte) 0x42, (byte) 0x43, (byte) 0x30, (byte) 0x39, (byte) 0x46, (byte) 0x36,
				(byte) 0x34, (byte) 0x31, (byte) 0x31, (byte) 0x34, (byte) 0x31, (byte) 0x45, (byte) 0x33, (byte) 0x41,
				(byte) 0x45, (byte) 0x39, (byte) 0x46, (byte) 0x44, (byte) 0x38, (byte) 0x44, (byte) 0x42, (byte) 0x45,
				(byte) 0x37, (byte) 0x35, (byte) 0x33, (byte) 0x43, (byte) 0x45, (byte) 0x44, (byte) 0x44, (byte) 0x43,
				(byte) 0x41, (byte) 0x37, (byte) 0x45, (byte) 0x38, (byte) 0x42, (byte) 0x45, (byte) 0x33, (byte) 0x36,
				(byte) 0x36, (byte) 0x45, (byte) 0x37, (byte) 0x43, (byte) 0x44, (byte) 0x39, (byte) 0x36, (byte) 0x36,
				(byte) 0x42, (byte) 0x31, (byte) 0x44, (byte) 0x30, (byte) 0x42, (byte) 0x41, (byte) 0x32, (byte) 0x33,
				(byte) 0x42, (byte) 0x37, (byte) 0x30, (byte) 0x46, (byte) 0x32, (byte) 0x36, (byte) 0x37, (byte) 0x33,
				(byte) 0x38, (byte) 0x36, (byte) 0x35, (byte) 0x0d, (byte) 0x0a, (byte) 0x32, (byte) 0x33 };
		int res1 = Ddi.ddi_sys_setCertHash(hash5);
		if (res1 == 0) {
			myHandleDeal("保存证书hash值成功", res1);
		} else {
			myHandleDeal("保存证书hash值失败，需要卸载机器安装的证书", res1);
		}
		int res2 = Ddi.ddi_sys_getCertHash(hash);
		if (res2 == 0) {
			myHandleDeal("获取证书hash值成功", res2);
		} else {
			myHandleDeal("获取证书hash值失败，需要卸载机器安装的证书", res2);
		}
	}

	// 建行3.2
	private void testJHPinpad() {
		int ret;
		int load_rsa[] = { 0x00, 0x08, 0x00, 0x00, 0xa2, 0xd1, 0xd5, 0xf3, 0x04, 0x1a, 0x87, 0x0c, 0xff, 0xf2, 0xa9,
				0x5b, 0x90, 0x5b, 0xa6, 0x8d, 0x3a, 0x39, 0x92, 0xe9, 0x83, 0xd4, 0x41, 0xaa, 0x8b, 0xe6, 0x4f, 0x6e,
				0xe8, 0x1e, 0xc2, 0x8a, 0x5e, 0x53, 0x62, 0x48, 0xcc, 0x9c, 0xcd, 0x3b, 0xda, 0xb9, 0xf0, 0xa8, 0x67,
				0x37, 0xeb, 0xc5, 0xd0, 0x8b, 0xfb, 0xda, 0xe2, 0x10, 0x99, 0xdf, 0xbd, 0xd4, 0x96, 0x90, 0x98, 0xb1,
				0xbe, 0xf2, 0xe1, 0xf1, 0x45, 0xeb, 0x33, 0x0c, 0x68, 0x20, 0xfc, 0xce, 0x6f, 0x3a, 0xce, 0x4a, 0xbb,
				0xdb, 0xaf, 0x5b, 0xb9, 0x39, 0x7c, 0xd1, 0xbd, 0xd7, 0xc2, 0x57, 0x48, 0x19, 0x1b, 0x9b, 0x50, 0x7a,
				0xd7, 0x47, 0xc5, 0x21, 0x04, 0xa5, 0x78, 0x5f, 0x12, 0x02, 0x93, 0xb8, 0x56, 0x71, 0xb6, 0x87, 0x8e,
				0x5f, 0xc4, 0x86, 0xb4, 0xbd, 0xab, 0x26, 0x4b, 0x4f, 0x6e, 0xf4, 0x0b, 0xb0, 0xdf, 0xdd, 0x8a, 0xea,
				0x77, 0xc3, 0xf7, 0x1a, 0xc4, 0xf8, 0xbe, 0xd1, 0x94, 0xe9, 0x79, 0x7b, 0x2a, 0xd9, 0xb9, 0x80, 0xd4,
				0x9b, 0x56, 0x20, 0x83, 0x1a, 0xb9, 0x43, 0x62, 0xff, 0xed, 0xc5, 0xcc, 0xb0, 0x40, 0xce, 0xe0, 0x56,
				0xe6, 0xf8, 0xd0, 0x8b, 0x6d, 0x5c, 0x30, 0xd9, 0x20, 0x9d, 0x31, 0x71, 0x81, 0xbc, 0xfb, 0xd0, 0x11,
				0x91, 0x28, 0x00, 0xc1, 0xab, 0x5e, 0x0d, 0x29, 0xfe, 0x5e, 0xc1, 0x2e, 0x17, 0x6b, 0xcd, 0xb9, 0x70,
				0x8e, 0x8a, 0x62, 0xd3, 0x5a, 0x16, 0x9f, 0xc2, 0x23, 0x5e, 0xb0, 0xf8, 0x9f, 0x29, 0x45, 0x79, 0x8c,
				0x4f, 0xc8, 0x98, 0x34, 0xfc, 0xc7, 0x2e, 0x23, 0xa7, 0xe2, 0x97, 0x86, 0xb0, 0xab, 0x4d, 0x2b, 0xd0,
				0x8d, 0x2b, 0x62, 0x30, 0xa3, 0xcb, 0xda, 0x87, 0xae, 0x27, 0xa0, 0x9d, 0xce, 0xe1, 0x7b, 0xc8, 0x95,
				0xcd, 0x44, 0x77, 0x77, 0xb7, 0x49, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01 };
		int load_rsa1[] = { 0x18, 0xae, 0xeb, 0x83, 0x0d, 0x4d, 0xf2, 0xf4, 0xad, 0xe4, 0x47, 0xd3, 0xfd, 0xc0, 0x81,
				0x7c, 0x0e, 0x96, 0xee, 0x99, 0xcf, 0xde, 0x24, 0xfb, 0x31, 0x82, 0xc4, 0x8f, 0x25, 0x70, 0xaa, 0xf9,
				0xd2, 0xb7, 0x38, 0x65, 0xc5, 0x12, 0x8f, 0x1a, 0xf2, 0x68, 0x6d, 0xa8, 0x39, 0xd5, 0x66, 0x7e, 0x34,
				0xc5, 0xea, 0x11, 0xe8, 0x66, 0x53, 0x9a, 0x9d, 0xec, 0xbb, 0x52, 0xa6, 0x1d, 0x41, 0xbe, 0xbc, 0xfe,
				0xd5, 0xc2, 0x9b, 0x08, 0x4c, 0x4a, 0x4a, 0x63, 0x7d, 0xc5, 0x68, 0xb5, 0x14, 0x55, 0x52, 0xe1, 0x44,
				0x33, 0x42, 0x8c, 0x1c, 0x24, 0x44, 0x5f, 0xe3, 0x44, 0x85, 0x0c, 0x42, 0x52, 0x70, 0xf1, 0xbe, 0xb7,
				0xc1, 0xab, 0x42, 0x73, 0xdc, 0xae, 0x94, 0xe0, 0xa6, 0x09, 0xdb, 0xc6, 0xf8, 0x3e, 0x63, 0x64, 0x2f,
				0xd0, 0x61, 0x9e, 0xed, 0x34, 0x7a, 0x32, 0x9c, 0xd0, 0x51, 0x2e, 0x64, 0x1e, 0x9f, 0xea, 0xd9, 0xfa,
				0x36, 0xcb, 0xb0, 0x63, 0x1c, 0x0a, 0x95, 0x9f, 0x07, 0x4d, 0x5a, 0x24, 0xd7, 0xc4, 0xb9, 0x29, 0x06,
				0xd1, 0xf9, 0x3a, 0xf7, 0x5d, 0xf3, 0xaa, 0xb7, 0x86, 0x86, 0xbf, 0x7f, 0x26, 0xeb, 0x57, 0xe2, 0x99,
				0xe0, 0x61, 0xa0, 0x90, 0x14, 0x0c, 0x46, 0x54, 0x61, 0xb3, 0x18, 0xa1, 0xf2, 0xe3, 0x8f, 0xca, 0x84,
				0x0f, 0x3f, 0x4d, 0xed, 0x0a, 0x61, 0xcc, 0xd3, 0x90, 0xc1, 0xea, 0xa0, 0x69, 0x63, 0x8a, 0x81, 0xa4,
				0x03, 0xe6, 0x60, 0x59, 0xc5, 0xb1, 0xe9, 0x8f, 0x47, 0x90, 0xc0, 0xa1, 0xb7, 0xf8, 0xad, 0x5e, 0x1d,
				0x88, 0x8b, 0xec, 0x95, 0x93, 0xc3, 0xd2, 0x1b, 0x41, 0xb9, 0xe6, 0xfb, 0x75, 0x2d, 0x81, 0x31, 0xfb,
				0x7d, 0xce, 0xe7, 0x20, 0xc8, 0x88, 0xb8, 0x4f, 0x9a, 0x1a, 0x86, 0xa3, 0xc3, 0xfb, 0x88, 0x13, 0xf8,
				0xdb, 0x07, 0xb7, 0x6c, 0xa4, 0xd2, 0xbf, 0xbd, 0x58, 0x2a, 0xee, 0x4b, 0x29, 0x81, 0x3b, 0xbc, 0x8f,
				0x0e, 0x4f, 0x57, 0xff, 0x4e, 0x18, 0x99, 0x8d, 0x75, 0x9a, 0x45, 0xb1, 0xdb, 0x0d, 0xbf, 0x0a, 0x23,
				0x34, 0x84, 0xb2, 0xf5, 0xac, 0x55, 0x44, 0xa6, 0xbb, 0xf0, 0x1a, 0x15, 0x68, 0xfe, 0x83, 0xac, 0x3d,
				0xf4, 0x50, 0x9b, 0x31, 0x1a, 0xcb, 0xe6, 0x16, 0xbc, 0xbc, 0x29, 0x3c, 0x63, 0x54, 0x86, 0x55, 0x98,
				0xef, 0x4d, 0xb9, 0x72, 0xc4, 0xad, 0xe1, 0x3a, 0xb3, 0xa9, 0x63, 0xa0, 0x00, 0xee, 0x97, 0xc3, 0xa0,
				0x85, 0xf5, 0x40, 0x00, 0xd3, 0xbb, 0x5e, 0xbe, 0xd7, 0x42, 0x22, 0xf4, 0xb6, 0x74, 0xf8, 0xef, 0xbb,
				0x4b, 0x6d, 0xdb, 0xe4, 0x06, 0x9b, 0xb1, 0xac, 0xfd, 0x8c, 0xdf, 0x3d, 0xca, 0xd7, 0xf8, 0x9b, 0x7f,
				0x2a, 0xc8, 0x80, 0x58, 0x88, 0xd0, 0x81, 0xa2, 0xd1, 0x39, 0xfd, 0xec, 0x41, 0x94, 0xfc, 0x6a, 0xc5,
				0x1a, 0x89, 0x99, 0x41, 0x4c, 0x2f, 0x51, 0x90, 0x1f, 0x3d, 0xa2, 0x7d, 0x1f, 0xda, 0x82, 0x56, 0xb1,
				0x3e, 0x71, 0x31, 0x53, 0x02, 0x16, 0xae, 0x7c, 0xd7, 0x1d, 0x36, 0x70, 0x3a, 0xc6, 0x8d, 0xce, 0x4e,
				0x39, 0x6a, 0xdd, 0xff, 0x28, 0x19, 0x59, 0x37, 0x1b, 0xd3, 0x40, 0xc8, 0x07, 0x3a, 0xa9, 0x91, 0x92,
				0x1e, 0xf5, 0xb5, 0x57, 0xa8, 0xa8, 0x79, 0x4b, 0x7d, 0xbe, 0x36, 0x33, 0xfa, 0x2a, 0x05, 0xf8, 0x12,
				0xe3, 0x03, 0x59, 0xc9, 0xce, 0xdc, 0xaa, 0xa1, 0x7d, 0x22, 0x9c, 0x56, 0x4d, 0xe9, 0x5c, 0xd2, 0x15,
				0x6c, 0xd1, 0xb4, 0xfe, 0x0b, 0xf6, 0xef, 0x7f, 0xfa, 0x83, 0x02, 0x33, 0x8f, 0x4c, 0xc6, 0xa5, 0x16,
				0x92, 0xf9, 0xeb, 0x18, 0xeb, 0x1d, 0x2e, 0x06, 0xa0, 0xbc, 0x9a, 0x2a, 0x8a, 0x0b, 0x41, 0xc6, 0x3f,
				0xd6, 0x5e, 0xdb, 0x99, 0x77, 0x63, 0x82, 0x95, 0xff, 0x36, 0x68, 0xad, 0xf4, 0x3c, 0x39, 0x5b, 0x9e,
				0xfa, 0x6f, 0x03, 0x0f, 0x28, 0x1e, 0xc1, 0x49, 0xd5, 0x88, 0x49, 0xd3, 0x08, 0xbd, 0xb9, 0x36, 0x9f,
				0x2f, 0x76, 0xb2, 0x2d, 0x4d, 0xda, 0x66, 0xd9, 0x2d, 0x93, 0x10, 0x06, 0xe3, 0x8f, 0xa6, 0x70, 0x4c,
				0xde, 0xb5, 0x0d, 0xa8, 0x78, 0x95, 0xeb, 0x20, 0x06, 0x0f, 0xca, 0xfb, 0xac, 0x6d, 0x6c, 0x8f, 0x1d,
				0xee, 0x12, 0x1b, 0x55, 0xda, 0xea, 0xa3, 0x3e, 0x63, 0x5b, 0x6a, 0x73, 0x52, 0xd3, 0x93, 0x91, 0xbc,
				0x09, 0xa0, 0x01, 0x24, 0x3b, 0x86, 0xb6, 0x56, 0x60, 0x30, 0x3a, 0xe4, 0xdd, 0xf0, 0x7b, 0x0f, 0xb2,
				0xfa, 0x2d, 0x84, 0x68, 0xe7, 0x0f, 0x0f, 0x75, 0x9e, 0x34, 0x46, 0x62, 0xd1, 0x0e, 0xce, 0xf0, 0x37,
				0x05, 0xdd, 0xd6, 0x99, 0x1e, 0x81, 0x41, 0x3f, 0xf1, 0x4c, 0xbd, 0xf2, 0x3b, 0x83, 0xec, 0xbb, 0x6c,
				0xc6, 0x7b, 0xb8, 0x92, 0x8c, 0x9f, 0x09, 0x68, 0xb7, 0x54, 0xad, 0xb2, 0x5e, 0x0f, 0xcd, 0x11, 0xd8,
				0x7e, 0x1e, 0x12, 0x96, 0x9e, 0xad, 0x42, 0x39, 0xdd, 0x84, 0x67, 0xd6, 0xc4, 0x7d, 0xb0, 0x14, 0xb6,
				0x92, 0xec, 0x67, 0xbe, 0x2d, 0x0c, 0xc2, 0x94, 0x93, 0x29, 0x5e, 0x45, 0x05, 0x97, 0x4b, 0x6e, 0x8e,
				0x2b, 0x51, 0xdb, 0x23, 0xbc, 0xf4, 0x1a, 0x32, 0x44, 0x1d, 0x02, 0xf6, 0xb2, 0x82, 0x4f, 0x80, 0x8d,
				0xb0, 0xee, 0xfd, 0x39, 0xb3, 0x97, 0x6d, 0x77, 0x8e, 0x52, 0xba, 0x39, 0x88, 0xe9, 0xe5, 0x50, 0xb8,
				0x92, 0xb2, 0x24, 0x7c, 0xbe, 0x0c, 0x7c, 0x12, 0x10, 0x8a, 0xe9, 0xdf, 0xff, 0x08, 0x5d, 0x7e, 0xcf,
				0xf2, 0x8f, 0x52, 0x34, 0xe4, 0x10, 0x5b, 0x62, 0x98, 0xed, 0x96, 0x42, 0xad, 0x20, 0x75, 0x29, 0x15,
				0x42, 0x49, 0x73, 0x12, 0x05, 0x95, 0x74, 0x9b, 0x7f, 0x76, 0x34, 0x28, 0xb3, 0x43, 0xca, 0x16, 0xb3,
				0xe6, 0x38, 0x49, 0xcf, 0x16, 0x31, 0xc5, 0xcf, 0xee, 0x3a, 0xd9, 0x11, 0x15, 0xfe, 0xb2, 0x08, 0xdb,
				0xe7, 0x89, 0xfe, 0x58, 0xce, 0x0c, 0xba, 0x3c, 0xeb, 0x96, 0x0b, 0xf8, 0xd2, 0x19, 0xbc, 0x67, 0x01,
				0x9b, 0x1b, 0x58, 0x03, 0xce, 0x41, 0x6c, 0xc9, 0xe7, 0x0e, 0x19, 0xcf, 0xea, 0xb8, 0xd6, 0x14, 0x73,
				0xb1, 0x27, 0x73, 0xe3, 0x5f, 0x92, 0xe3, 0x60, 0x38, 0x94, 0xf1, 0x24, 0xca, 0xf7, 0xa5, 0x27, 0xf8,
				0xb1, 0xde, 0x19, 0xfd, 0x68, 0x11, 0x76, 0xa7, 0x22, 0xca, 0x22, 0x4d, 0x97, 0xdd, 0x07, 0xb5, 0xa8,
				0xee, 0xa3, 0x2a, 0x41, 0xbe, 0x5f, 0x23, 0xb7, 0x7c, 0xce, 0x60, 0xc1, 0x5c, 0xa3, 0x6b, 0x35, 0xa8,
				0x90, 0xeb, 0x03, 0x54, 0x35, 0x38, 0x66, 0x62, 0x52, 0x44, 0x10, 0xde, 0x17, 0xaf, 0x33, 0x12, 0x6f,
				0x04, 0x4f, 0x08, 0x28, 0x74, 0xbb, 0x26, 0xe8, 0x3f, 0x1c, 0x44, 0xd4, 0x41, 0x93, 0x64, 0x9e, 0xe5,
				0xd4, 0x8f, 0x93, 0x90, 0xe8, 0x00, 0xda, 0x3c, 0x07, 0x94, 0x83, 0xe7, 0x9e, 0x8d, 0xc9, 0xaa, 0xff,
				0xe2, 0x19, 0x9e, 0x5f, 0xa6, 0xb6, 0xca, 0xec, 0x07, 0x5a, 0x8b, 0x45, 0x1c, 0x51, 0x67, 0xe7, 0xf2,
				0x8a, 0xbb, 0x13, 0xbe, 0x83, 0x0d, 0x75, 0x74, 0xb2, 0x61, 0x52, 0xfb, 0x56, 0x45, 0xa4, 0x94, 0xc9,
				0xa3, 0x96, 0xf9, 0x5a, 0xb6, 0x03, 0xff, 0xbc, 0x4d, 0x73, 0x72, 0xfe, 0x8d, 0x3a, 0x7d, 0xb8, 0xd2,
				0x77, 0x70, 0xab, 0x89, 0x79, 0x6f, 0x03, 0x2c, 0xea, 0xa2, 0x14, 0x3f, 0x2f, 0xa6, 0xf8, 0x7c, 0x97,
				0xf3, 0x2d, 0xed, 0xa7, 0x4a, 0x96, 0xf1, 0xa2, 0x8b, 0x3d, 0x18, 0x3f, 0x23, 0x2f, 0xa0, 0xc5, 0x9a,
				0xa6, 0xe6, 0x7d, 0xb3, 0x62, 0xd9, 0x0c, 0x7e, 0xa3, 0x8d, 0x21, 0x3b, 0x46, 0x11, 0x26, 0x5f, 0xa5,
				0xe6, 0x01, 0x0d, 0xa9, 0x78, 0xc2, 0x0b, 0xfd, 0x3e, 0x0b, 0x69, 0x1f, 0x36, 0xba, 0x3a, 0xdb, 0x78,
				0x1e, 0x14, 0xe4, 0xae, 0xbe, 0xd1, 0xdd, 0xf3, 0xf7, 0xb8, 0x5b, 0x58, 0x65, 0xa8, 0x59, 0xc7, 0x57,
				0xeb, 0x4d, 0xee, 0xe8, 0x32, 0x58, 0xda, 0x5a, 0xc4, 0xfb, 0x47, 0xb3, 0x30, 0xfc, 0x36, 0x92, 0xf7,
				0xd2, 0x6f, 0x11, 0xf2, 0xae, 0xc8, 0x6b, 0x89, 0xc4, 0x5b, 0x93, 0x04, 0x5b, 0xa6, 0xda, 0xab, 0xbd,
				0x57, 0xbe, 0x42, 0x79, 0x9e, 0x3e, 0x44, 0xce, 0x1b, 0xd5, 0x05, 0xb7, 0xde, 0xa9, 0x56, 0x5a, 0x6c,
				0xcc, 0x3a, 0xca, 0xcd, 0x71, 0x01, 0x96, 0x96, 0x80, 0x67, 0x91, 0xec, 0x07, 0xf9, 0xe9, 0x24, 0x83,
				0xe6, 0xd1, 0xc0, 0xe1, 0x74, 0x37, 0x9c, 0x3e, 0xba, 0x17, 0xd1, 0x95, 0x99, 0x32, 0xa2, 0x1a, 0x38,
				0x55, 0x9f, 0xc7, 0x11, 0x5a, 0x9f, 0xa4, 0xfe, 0xb6, 0x52, 0x5c, 0xec, 0x85, 0x97, 0x90, 0xb9, 0xb0,
				0x61, 0x31, 0xb5, 0x4d, 0x98, 0xe3, 0x34, 0x69, 0xf6, 0x48, 0x19, 0x88, 0x45, 0xa5, 0x24, 0xd6, 0x82,
				0x26, 0x84, 0x7a, 0x5e, 0xc1, 0x92, 0x3f, 0x63, 0x51, 0xe1, 0xb9, 0x9c, 0xef, 0x87, 0x6b, 0xeb, 0xbd,
				0x26, 0xd5, 0x9c, 0x4b, 0x0a, 0x57, 0xfc, 0x42, 0x79, 0xad, 0x1f, 0x07, 0x90, 0xa0, 0xe8, 0xd5, 0xeb,
				0xe4, 0xdd, 0x32, 0x4a, 0x57, 0x03, 0x7f, 0x21, 0xc9, 0x85, 0x58, 0x17, 0xd3, 0x67, 0xeb, 0xb4, 0x58,
				0xdb, 0xde, 0x71, 0xd8, 0x8d, 0x28, 0xa8, 0x54, 0xf6, 0x6f, 0x05, 0xf1, 0x32, 0xfc, 0x0b, 0xe8, 0x29,
				0x7b, 0x0a, 0x04, 0xc2, 0x6b, 0x75, 0x74, 0xd1, 0x9f, 0xf6, 0x02, 0x13, 0x03, 0xfe, 0x5c, 0x35, 0x6f,
				0xac, 0x6f, 0x30, 0x5c, 0xa6, 0x3c, 0x6a, 0x89, 0x0f, 0xa2, 0xee, 0xa6, 0x48, 0x55, 0xe9, 0xf2, 0x40,
				0xc9, 0x4c, 0x38, 0x2f, 0x9b, 0x54, 0xbe, 0x2a, 0xd3, 0x65, 0xba, 0xb8, 0x16, 0xa0, 0x15, 0x5a, 0x23,
				0x30, 0x7c, 0x07, 0x56, 0xa0, 0x9c, 0xd0, 0xe5, 0x43, 0x89, 0x25, 0x5e, 0xc9, 0x96, 0xdc, 0xc5, 0x94,
				0x58, 0x4b, 0x15, 0x5f, 0x23, 0xa6, 0x8a, 0x33, 0x16, 0x05, 0xd6, 0x5e, 0xde, 0xe1, 0x40, 0xde, 0xcb,
				0x82, 0x67, 0xf4, 0x68, 0x2d, 0x15, 0x72, 0x30, 0x47, 0xeb, 0xf3, 0x17, 0xcd, 0x7b, 0x3c, 0x21, 0x37,
				0x63, 0x16, 0x6a, 0x7d, 0x54, 0xa2, 0x6d, 0x58, 0xe0, 0x20, 0x8f, 0x5e, 0xf5, 0xea, 0x2c, 0x4d, 0x3e,
				0x81, 0x8a, 0xd4, 0x2d, 0xc3, 0xcb, 0x8d, 0xe9, 0x48, 0x3f, 0x75, 0xf1, 0x92, 0x2d, 0x56, 0x06, 0x03,
				0x7c, 0x11, 0x9d, 0xd8, 0xd0, 0x97, 0x8a, 0x85, 0xd5, 0xc0, 0x47, 0xc0, 0x05, 0x83, 0xc3, 0x16, 0xfa,
				0x56, 0xa0, 0x89, 0x8e, 0x84, 0x17, 0xe6, 0x8a, 0x9c, 0x1c, 0x36, 0x1e, 0xa8, 0xad, 0xed, 0x83, 0x6d,
				0x1c, 0x92, 0xd6, 0xe2, 0x25, 0x77, 0x6b, 0xd3, 0x3e, 0x97, 0x9c, 0x75, 0x77, 0x9c, 0x76, 0x17, 0x3f,
				0x3a, 0x94, 0x5c, 0xae, 0xd6, 0xb5, 0xd2, 0x55, 0x90, 0xf0, 0x21, 0xc0, 0x82, 0x0b, 0xea, 0x20, 0x99,
				0x53, 0x70, 0xf1, 0x7a, 0xba, 0x2b, 0x49, 0x8b, 0x01, 0x15, 0x50, 0x64, 0x69, 0x20, 0xf1, 0xd1, 0xa0,
				0xc8, 0xb9, 0x76, 0x95, 0xec, 0xcc, 0x4a, 0x61, 0x6a, 0x3a, 0x5e, 0x33, 0x01, 0xd8, 0x24, 0x40, 0xa2,
				0x53, 0x24, 0xe3, 0xea, 0x56, 0xe7, 0x6d, 0xe1, 0xea, 0xed, 0x57, 0x5e, 0x3a, 0x7f, 0x1d, 0x8f, 0x0d,
				0x73, 0xac, 0x3d, 0xf4, 0xcf, 0x5f, 0xd4, 0xee, 0x72, 0x61, 0xc8, 0x6c, 0x23, 0xd4, 0x12, 0x65, 0x42,
				0xac, 0xc9, 0x0e, 0xcd, 0x79, 0xbf, 0x12, 0xea,

		};
		int load_rsa2[] = {

				0x00, 0x08, 0x00, 0x00, 0xc7, 0x50, 0x73, 0x6e, 0xb2, 0x1e, 0x67, 0xa5, 0x34, 0xe9, 0xaa, 0x72, 0x96,
				0x18, 0xff, 0x3e, 0x8c, 0xb4, 0xed, 0x73, 0x56, 0x60, 0xe2, 0xd9, 0x43, 0xde, 0x5c, 0x48, 0x8b, 0x6c,
				0x8f, 0x11, 0xec, 0x86, 0x95, 0x60, 0x44, 0x75, 0xe9, 0x06, 0xc3, 0x2d, 0xd4, 0x47, 0x39, 0x9a, 0x01,
				0xbc, 0xf3, 0xd1, 0x2b, 0x0e, 0xed, 0xb5, 0x45, 0x0c, 0x73, 0x05, 0x76, 0xb8, 0xdd, 0xb6, 0x97, 0x99,
				0x19, 0xe7, 0x1a, 0x7f, 0xa3, 0x91, 0x75, 0xf0, 0x61, 0x2d, 0xb4, 0xa7, 0x11, 0x53, 0xa6, 0x13, 0xcc,
				0x68, 0x24, 0xd2, 0xe9, 0xb5, 0x4a, 0xee, 0x29, 0xc1, 0x96, 0x1d, 0x6e, 0x7b, 0x56, 0x20, 0x88, 0x29,
				0x98, 0xea, 0x1d, 0xf9, 0x29, 0x6e, 0x09, 0x55, 0x90, 0x7b, 0x76, 0xee, 0xa3, 0x88, 0xf6, 0x84, 0x1c,
				0x7e, 0x37, 0x06, 0xff, 0x57, 0xea, 0x6f, 0x7f, 0xf5, 0x2d, 0xc1, 0x58, 0x3d, 0x99, 0x08, 0xc7, 0x92,
				0xe4, 0x01, 0x9c, 0x2e, 0xc6, 0xad, 0xf4, 0x09, 0x3b, 0x6b, 0x25, 0xe8, 0xfd, 0xdf, 0x4a, 0x0c, 0x7b,
				0x5e, 0x3b, 0xc6, 0x47, 0xa4, 0x26, 0xf7, 0x50, 0x8a, 0xc6, 0x91, 0x5c, 0x37, 0x25, 0x2f, 0xdd, 0x5a,
				0x5d, 0x00, 0x67, 0xb0, 0x2a, 0x12, 0x65, 0x6b, 0x92, 0x67, 0x9a, 0x56, 0x8a, 0xc5, 0x07, 0xf1, 0xf8,
				0x42, 0x30, 0x05, 0xb9, 0x48, 0x71, 0x52, 0xaf, 0xbb, 0xf8, 0x67, 0xf1, 0xac, 0xc9, 0x30, 0xb6, 0x3d,
				0x7a, 0xa1, 0x68, 0x7f, 0xbc, 0x74, 0xfe, 0xae, 0x95, 0x31, 0x25, 0x7f, 0x12, 0x84, 0xda, 0xd1, 0x99,
				0x3e, 0x33, 0xd8, 0x3e, 0x74, 0x96, 0xbc, 0xae, 0x52, 0xc1, 0x86, 0x36, 0xf4, 0x49, 0x81, 0x6c, 0x7c,
				0x6e, 0x88, 0x46, 0x2d, 0x64, 0x1e, 0xc0, 0xbe, 0x51, 0xfa, 0x22, 0x11, 0xcb, 0x3d, 0x32, 0x8c, 0x70,
				0x2b, 0x96, 0xd5, 0xd7, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x01, 0x00, 0x01, };
		int write_sign[] = { 0x43, 0x9d, 0x86, 0x8a, 0x2c, 0x60, 0xfb, 0x6d, 0x2e, 0xa1, 0x9a, 0x29, 0x84, 0xb7, 0x60,
				0xf4, 0x96, 0x51, 0xef, 0x03, 0xcf, 0x52, 0xc8, 0x26, 0x85, 0x9e, 0x08, 0x7a, 0xa5, 0x8f, 0xd1, 0xec,
				0x54, 0xa5, 0xf9, 0x47, 0x8d, 0xac, 0x82, 0x35, 0x32, 0x61, 0x2b, 0x87, 0x40, 0x93, 0x0b, 0xcc, 0x93,
				0x04, 0x07, 0x26, 0x47, 0xde, 0xcf, 0x30, 0x9d, 0xad, 0x82, 0xe4, 0xd0, 0x0f, 0x2f, 0x3c, 0x44, 0x24,
				0x8c, 0xc4, 0xb9, 0xf1, 0xe6, 0x3c, 0x1b, 0x47, 0x61, 0xdd, 0x77, 0x1d, 0x2d, 0xb0, 0xee, 0x96, 0xdb,
				0x77, 0x2a, 0x0a, 0x24, 0x56, 0x96, 0x1a, 0xb7, 0x99, 0x4d, 0xf3, 0xd8, 0x22, 0xdf, 0x23, 0x9e, 0xd4,
				0x35, 0xc7, 0x7e, 0x70, 0x45, 0xff, 0x6a, 0x66, 0x66, 0x99, 0x22, 0x40, 0x5f, 0xf0, 0xe4, 0x83, 0x08,
				0xcd, 0x93, 0x94, 0xe0, 0x8b, 0x34, 0x20, 0x8a, 0x48, 0x28, 0xe1, 0xfb, 0x20, 0xdb, 0x1d, 0x5c, 0xf4,
				0x8e, 0x5b, 0xb2, 0xe1, 0x7f, 0xa4, 0x00, 0x23, 0xc0, 0x7e, 0x31, 0x48, 0x47, 0x4f, 0x8d, 0x7c, 0x9a,
				0x69, 0x39, 0x5a, 0x52, 0x06, 0xbd, 0x87, 0x4d, 0xf1, 0x20, 0x44, 0xfc, 0x7b, 0x0d, 0xc3, 0xe7, 0xee,
				0x12, 0x15, 0xef, 0x1c, 0x88, 0xbb, 0x25, 0xfe, 0x84, 0x4e, 0x1c, 0xb6, 0x8c, 0xa6, 0xb4, 0x7a, 0x4c,
				0xb7, 0x7b, 0xff, 0xaa, 0xf1, 0xf0, 0x4d, 0x6b, 0xf5, 0xe4, 0xcd, 0xfd, 0x66, 0xb1, 0x17, 0x2c, 0xad,
				0xf4, 0xe9, 0xbb, 0x7f, 0x7c, 0x59, 0x8b, 0x01, 0xfc, 0xa3, 0x41, 0xdd, 0xab, 0xbb, 0xd7, 0xd9, 0x40,
				0xf1, 0x70, 0xf8, 0xfb, 0x0f, 0xeb, 0x7c, 0xa0, 0xd9, 0xe6, 0xee, 0x03, 0x03, 0x2f, 0x29, 0xfd, 0x81,
				0xbc, 0x7e, 0x27, 0x97, 0x54, 0x79, 0x54, 0x93, 0x7c, 0x5c, 0x28, 0x50, 0xa0, 0xe6, 0x7b, 0xab, 0x7d,
				0xce, 0x53, 0x35,

		};
		int write_sign0[] = { 0x89, 0x96, 0xa7, 0xd2, 0x8b, 0xe9, 0x5e, 0xf9, 0xa0, 0x65, 0xab, 0xd4, 0xb8, 0xee, 0x0d,
				0x97, 0xcf, 0x36, 0xc6, 0x33, 0xc9, 0x05, 0xe6, 0x44, 0xe8, 0xf6, 0xc0, 0x93, 0x8d, 0x96, 0xce, 0xfb,
				0x46, 0xbd, 0x0a, 0xbc, 0x5a, 0x10, 0xa3, 0xbf, 0xc2, 0x54, 0x67, 0x2e, 0x13, 0x8e, 0x61, 0x85, 0xe8,
				0x2f, 0xa0, 0x23, 0x0c, 0x52, 0x34, 0xee, 0x3c, 0x11, 0xf1, 0x94, 0x32, 0xb7, 0x2d, 0x09, 0x03, 0x61,
				0x19, 0x0f, 0x95, 0x7c, 0xfc, 0xf1, 0xc7, 0xfd, 0x60, 0xa1, 0x76, 0xc9, 0xda, 0x2e, 0xe6, 0x9b, 0x03,
				0x02, 0xaf, 0x1f, 0x8b, 0x2b, 0xdf, 0x41, 0x73, 0x2d, 0x72, 0x99, 0x1e, 0xf1, 0xbc, 0x87, 0xd3, 0x41,
				0xa2, 0x7a, 0xe0, 0x65, 0xf1, 0xd5, 0xfb, 0x68, 0xa3, 0x44, 0x03, 0x5f, 0x1f, 0x34, 0x3e, 0x23, 0x44,
				0xd1, 0xa3, 0xb2, 0xf6, 0xad, 0x8b, 0x3e, 0x11, 0x52, 0x8c, 0x87, 0x44, 0x41, 0x84, 0xed, 0x71, 0xaa,
				0xbf, 0x40, 0xa7, 0x49, 0x15, 0x7c, 0x66, 0xc7, 0x0d, 0x7e, 0x29, 0xca, 0x0f, 0x57, 0x8d, 0xd4, 0x1b,
				0xdd, 0xb0, 0xad, 0x3c, 0xd9, 0x25, 0x6f, 0x99, 0xd3, 0x75, 0xa7, 0xaa, 0x86, 0x9f, 0xac, 0xdc, 0xa3,
				0x1d, 0xf8, 0xc6, 0x7a, 0x71, 0x29, 0x72, 0x4f, 0x8c, 0x8a, 0x3e, 0xb2, 0xdf, 0x77, 0x0f, 0x03, 0xce,
				0x17, 0xbd, 0x54, 0x80, 0xaa, 0xb5, 0x20, 0x90, 0x9d, 0x93, 0xad, 0x8f, 0xcd, 0x01, 0x03, 0xd3, 0x0c,
				0x97, 0xad, 0xa1, 0x95, 0x48, 0x24, 0x47, 0x54, 0x3c, 0x78, 0x3c, 0x0d, 0xf3, 0xe1, 0x56, 0xcc, 0x0a,
				0x18, 0xdc, 0xfe, 0xa0, 0x99, 0x81, 0x07, 0x9b, 0xd2, 0x30, 0xcc, 0x2a, 0x4e, 0x93, 0xec, 0x41, 0x13,
				0x25, 0xe3, 0x3a, 0xe1, 0x4d, 0x08, 0x15, 0xbe, 0x17, 0x59, 0xe7, 0xe6, 0x70, 0x96, 0x9f, 0xdf, 0x23,
				0x4c, 0x6c, 0x4f,

		};
		int loadmkdata[] = {

				0x6E, 0x5E, 0x94, 0xA2, 0xEA, 0x92, 0xC6, 0xDF, 0xA6, 0xC3, 0x00, 0x3C, 0x95, 0xC1, 0x8A, 0xD2, 0x27,
				0xD0, 0xC2, 0x7B, 0x5A, 0xC1, 0x19, 0x63, 0x66, 0xFE, 0x9E, 0xF1, 0x87, 0xA2, 0x3F, 0xEA, 0x29, 0x0F,
				0x49, 0xDF, 0x14, 0x57, 0xA4, 0x8B, 0xDC, 0xD9, 0x28, 0xAA, 0x4C, 0xE2, 0x24, 0xE6, 0x56, 0x71, 0xE7,
				0x38, 0x46, 0x1E, 0x5A, 0x97, 0xD9, 0xF7, 0xFA, 0x2F, 0xFD, 0xF3, 0xCC, 0x71, 0x34, 0x3A, 0xFE, 0x58,
				0x61, 0x22, 0xF8, 0x85, 0xFB, 0xA9, 0x07, 0x9F, 0x94, 0x7E, 0xC9, 0x0A, 0x63, 0xCC, 0x06, 0x84, 0x5E,
				0xB1, 0x2D, 0xE6, 0xF4, 0x10, 0xD8, 0x8B, 0x78, 0xEF, 0x8A, 0x0B, 0x08, 0xA7, 0xBF, 0x61, 0x92, 0xB1,
				0xA8, 0x98, 0x37, 0x64, 0xD4, 0xB0, 0xEB, 0x99, 0xA3, 0x68, 0xCB, 0xD7, 0x1D, 0xED, 0xB4, 0xF1, 0xE3,
				0xB1, 0xEC, 0x74, 0x57, 0xA9, 0xBA, 0x68, 0x12, 0x33, 0x50, 0x49, 0x8A, 0xC1, 0x0C, 0x2F, 0x65, 0x00,
				0xD5, 0xC8, 0x29, 0x0C, 0xA7, 0x3C, 0x02, 0xBA, 0x1A, 0xA8, 0xC6, 0xD7, 0x09, 0x89, 0x31, 0xEE, 0xEB,
				0xCD, 0x9F, 0xB8, 0xCC, 0x14, 0x67, 0xA4, 0xFA, 0xB0, 0x99, 0xA5, 0x71, 0x37, 0xA1, 0x5F, 0xCF, 0x19,
				0x39, 0xFD, 0x74, 0x79, 0xFF, 0x6B, 0xD9, 0x77, 0xC2, 0x61, 0x0D, 0x0A, 0x27, 0x55, 0x37, 0xB7, 0x00,
				0x4D, 0x12, 0xDA, 0x9F, 0x7E, 0xB7, 0xE4, 0x70, 0x84, 0x85, 0xD4, 0x1F, 0x1C, 0x32, 0xAF, 0xF8, 0xBB,
				0x27, 0x5A, 0xAB, 0x8C, 0x9C, 0xB1, 0x2C, 0xE5, 0xC7, 0xB2, 0xD2, 0xDF, 0x2E, 0x54, 0x1B, 0x61, 0xF8,
				0xC0, 0x98, 0x4E, 0x32, 0xD0, 0x3D, 0x11, 0xDF, 0xE9, 0xB7, 0xB6, 0x19, 0x66, 0xEC, 0x0B, 0x07, 0xCE,
				0x7A, 0x17, 0x8E, 0x4C, 0x31, 0xB4, 0xF6, 0x09, 0x52, 0xC2, 0x4E, 0x69, 0xF2, 0x4C, 0x19, 0xF6, 0x8D,
				0x03, };
		int mode = 0, i, len, regionid, keyid, key_index;
		byte index = 0;
		int[] devhandle = new int[10];
		int[] datalen = new int[10];
		byte[] databuf = new byte[4096];

		for (i = 0; i < 1024; i++) {
			databuf[i] = 0x33;
		}

		com.xinguodu.ddiinterface.Ddi ddi = new Ddi();
		ret = ddi.ddi_pinpad_opendevice(mode, devhandle);
		Log.d("Ddi_jni", "ddi_pinpad_opendevice," + ret);

		mode = 0x80000000;
		regionid = 0;
		keyid = 99;
		len = 516;
		for (i = 0; i < len; i++) {
			databuf[i] = (byte) load_rsa[i];
		}
		ret = ddi.ddi_pinpad_loadrsadata(devhandle[0], mode, regionid, keyid, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_loadrsadata," + ret);

		mode = 0x80000000;
		mode |= 1;
		regionid = 0;
		keyid = 99;
		len = 1536;
		for (i = 0; i < len; i++) {
			databuf[i] = (byte) load_rsa1[i];
		}
		ret = ddi.ddi_pinpad_loadrsadata(devhandle[0], mode, regionid, keyid, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_loadrsadata," + ret);

		mode = 0x80000000;
		// mode |= 1;
		regionid = 0;
		keyid = 100;
		len = 516;
		for (i = 0; i < len; i++) {
			databuf[i] = (byte) load_rsa2[i];
		}
		ret = ddi.ddi_pinpad_loadrsadata(devhandle[0], mode, regionid, keyid, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_loadrsadata," + ret);

		mode = 0x80000000;
		index = 0;
		len = 256;
		for (i = 0; i < len; i++) {
			databuf[i] = (byte) write_sign[i];
		}
		ret = ddi.ddi_pinpad_writesigninfo(devhandle[0], mode, index, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_writesigninfo," + ret);

		mode = 0x80000000;
		index = 1;
		len = 256;
		for (i = 0; i < len; i++) {
			databuf[i] = (byte) write_sign0[i];
		}
		ret = ddi.ddi_pinpad_writesigninfo(devhandle[0], mode, index, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_writesigninfo," + ret);

		mode = 0x80000000;
		regionid = 0;
		keyid = 99;
		ret = ddi.ddi_pinpad_getrsadata(devhandle[0], mode, regionid, keyid, datalen, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_getrsadata," + ret);

		mode = 0x80000000;
		index = 1;
		ret = ddi.ddi_pinpad_readsigninfo(devhandle[0], mode, index, datalen, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_readsigninfo," + ret);

		mode = 0x80000000;
		index = 1;
		key_index = 0;
		regionid = 0;
		keyid = 99;
		len = 256;
		for (i = 0; i < len; i++) {
			databuf[i] = (byte) loadmkdata[i];
		}
		ret = ddi.ddi_pinpad_loadmkdata(devhandle[0], mode, index, key_index, regionid, keyid, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_loadmkdata," + ret);

		key_index = -1;
		ret = ddi.ddi_pinpad_loadmkdata(devhandle[0], mode, index, key_index, regionid, keyid, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_loadmkdata1," + ret);
		key_index = 1;
		ret = ddi.ddi_pinpad_loadmkdata(devhandle[0], mode, index, key_index, regionid, keyid, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_loadmkdata2," + ret);
		key_index = 149;
		ret = ddi.ddi_pinpad_loadmkdata(devhandle[0], mode, index, key_index, regionid, keyid, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_loadmkdata3," + ret);
		key_index = 150;
		ret = ddi.ddi_pinpad_loadmkdata(devhandle[0], mode, index, key_index, regionid, keyid, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_loadmkdata4," + ret);

		key_index = 65534;
		ret = ddi.ddi_pinpad_loadmkdata(devhandle[0], mode, index, key_index, regionid, keyid, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_loadmkdata5," + ret);

		key_index = 2;
		ret = ddi.ddi_pinpad_loadmkdata(devhandle[0], mode, index, key_index, regionid, keyid, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_loadmkdata1," + ret);

		ret = ddi.ddi_pinpad_closedevice(mode, devhandle);
		Log.d("Ddi_jni", "ddi_pinpad_closedevice," + ret);

		Log.d("SNwrite", "BCM test over");
	}

	public void testReadCoustomInfo() {
		myHandleDeal("点伯趣testReadCoustomInfo测试", 0);
		int index = 0;
		String ksn = "P2174003000100002507";
		byte[] data = ksn.getBytes();
		int res1 = 30;
		try {
			res1 = Ddi.ddi_write_custom_info(index, data, data.length);
		} catch (Exception e) {
			Log.e("kang", e.toString());
		}
		if (res1 == 0) {
			myHandleDeal("点伯趣ddi_write_custom_info测试成功", res1);
		} else if (res1 == 1) {
			myHandleDeal("点伯趣ddi_write_custom_info测试失败", res1);
		} else {
			myHandleDeal("点伯趣ddi_write_custom_info其他返回", res1);
		}

		byte[] ndata = new byte[data.length];
		int res2 = 20;
		try {
			res2 = Ddi.ddi_read_custom_info(index, ndata, new int[] { data.length });
		} catch (Exception e) {
			Log.e("kang", e.toString());
		}
		if (res2 == 0) {
			myHandleDeal("点伯趣ddi_read_custom_info测试成功", res1);
			myHandleDeal(new String(ndata), res1);
		} else if (res2 == 1) {
			myHandleDeal("点伯趣ddi_read_custom_info测试失败", res1);
		}

	}

	public void testJL() {

		Log.d("Ddi_jni", "JL test start20180329");
		int mode = 0, len, regionid, keyid, key_index;
		byte index = 0;
		int[] devhandle = new int[10];
		int[] datalen = new int[10];
		byte[] databuf = new byte[4096];
		byte[] key_data = new byte[256];
		int key_len;

		// 读公钥及签名数据
		int ret = Ddi.ddi_pinpad_opendevice(mode, devhandle);
		Log.d("Ddi_jni", "ddi_pinpad_opendevice,ret= " + ret);

		mode = 0x80000000;
		regionid = 0;
		keyid = 1;
		ret = Ddi.ddi_pinpad_getrsadata(devhandle[0], mode, regionid, keyid, datalen, databuf);
		Log.d("Ddi_jni", "public key1,keyid = " + keyid + ",ret = " + ret);

		String tekStr = "rsa99:";
		for (int i = 0; i < datalen[0]; i++) {
			byte[] tmp = new byte[1];
			tmp[0] = databuf[i];
			tekStr += ByteUtils.byteArray2HexString(tmp);
		}
		Log.d("Ddi_jni", tekStr);

		mode = 0x80000000;
		regionid = 0;
		keyid = 2;
		ret = Ddi.ddi_pinpad_getrsadata(devhandle[0], mode, regionid, keyid, datalen, databuf);
		Log.d("Ddi_jni", "public key2,keyid = " + keyid + ",ret = " + ret);
		tekStr = "rsa100:";
		for (int i = 0; i < datalen[0]; i++) {
			byte[] tmp = new byte[1];
			tmp[0] = databuf[i];
			tekStr += ByteUtils.byteArray2HexString(tmp);
		}
		Log.d("Ddi_jni", tekStr);

		int mk_data[] = { 0x8D, 0x23, 0xF6, 0xF7, 0x15, 0x71, 0x7A, 0xC4, 0x59, 0x94, 0x0A, 0xC5, 0x2A, 0x38, 0x64,
				0x42, 0xE4, 0x46, 0xD1, 0x93, 0xB2, 0x4D, 0xA7, 0x7C, 0xB4, 0xF6, 0xD2, 0xDA, 0x2F, 0x8D, 0x9C, 0x06,
				0xFD, 0x45, 0xFB, 0xCA, 0xAA, 0xB3, 0xB7, 0xCE, 0x09, 0x65, 0x67, 0x67, 0x45, 0x40, 0xE8, 0xBD, 0x61,
				0xC9, 0xB3, 0xD5, 0x60, 0xD8, 0x10, 0xC3, 0xCC, 0x4C, 0xCE, 0x4B, 0x1C, 0x8C, 0x0E, 0x0B, 0x5F, 0xDD,
				0x81, 0x54, 0x64, 0x2B, 0x08, 0xD9, 0x10, 0xA3, 0x20, 0xC0, 0xC3, 0x24, 0x99, 0xE2, 0x7B, 0x82, 0x17,
				0xBF, 0xB5, 0x9B, 0xB5, 0x5F, 0x22, 0x17, 0x5B, 0xB0, 0xA4, 0xF4, 0x16, 0xE4, 0xA3, 0x6E, 0xE1, 0xE5,
				0x31, 0xF0, 0x30, 0x19, 0xB5, 0x08, 0xE7, 0xBB, 0x79, 0xFB, 0xDD, 0x08, 0x48, 0xD3, 0xA0, 0x93, 0x3F,
				0xE9, 0x7E, 0x04, 0x4E, 0x8F, 0x86, 0x38, 0x18, 0x10, 0x88, 0x63, 0x39, 0x0A, 0x73, 0x50, 0xC4, 0x39,
				0x3F, 0x39, 0x27, 0xDC, 0x85, 0x72, 0x8E, 0xD6, 0xB3, 0x23, 0x43, 0xC7, 0x07, 0x1C, 0x32, 0xDD, 0x72,
				0xEE, 0xFA, 0xDC, 0x2D, 0xB4, 0x23, 0x72, 0x3B, 0x49, 0x00, 0x34, 0x84, 0xC4, 0xFF, 0xF9, 0x20, 0x61,
				0x45, 0xA7, 0xFD, 0x1D, 0x41, 0xBC, 0x91, 0xFA, 0x4E, 0xB5, 0x08, 0xE7, 0x47, 0x36, 0x5F, 0x16, 0xC2,
				0x50, 0x45, 0xEF, 0x17, 0x93, 0xBE, 0x3F, 0x27, 0x4E, 0x99, 0x98, 0x3D, 0xFA, 0x58, 0x91, 0x85, 0xEF,
				0x1D, 0xB1, 0xB1, 0x12, 0xA1, 0x2D, 0x0D, 0xDE, 0xF3, 0xE1, 0x64, 0xD2, 0x21, 0x5D, 0x0F, 0x61, 0x0A,
				0x9E, 0x4F, 0x13, 0x57, 0xDE, 0x3C, 0x13, 0x71, 0x9E, 0xDF, 0x81, 0x07, 0xB9, 0x19, 0x39, 0x7F, 0xA2,
				0x53, 0xBE, 0xBF, 0x6B, 0xA2, 0x0C, 0x48, 0x99, 0x8B, 0x9F, 0x03, 0x5C, 0x7F, 0xEE, 0x6F, 0x93, 0xF5,
				0x52, 0x80, 0xA4, };

		mode = 0x40000001;
		index = 0;
		key_index = 2;
		regionid = 0;
		keyid = 0;
		len = 256;
		for (int i = 0; i < len; i++) {
			databuf[i] = (byte) mk_data[i];
		}
		ret = Ddi.ddi_pinpad_loadmkdata(devhandle[0], mode, index, key_index, regionid, keyid, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_loadmkdata,ret=" + ret);

		key_index = -1;
		ret = Ddi.ddi_pinpad_loadmkdata(devhandle[0], mode, index, key_index, regionid, keyid, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_loadmkdata-1,ret=" + ret);

		key_index = 0;
		ret = Ddi.ddi_pinpad_loadmkdata(devhandle[0], mode, index, key_index, regionid, keyid, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_loadmkdata0,ret=" + ret);

		key_index = 1;
		ret = Ddi.ddi_pinpad_loadmkdata(devhandle[0], mode, index, key_index, regionid, keyid, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_loadmkdata1,ret=" + ret);

		key_index = 149;
		ret = Ddi.ddi_pinpad_loadmkdata(devhandle[0], mode, index, key_index, regionid, keyid, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_loadmkdata149,ret=" + ret);

		key_index = 150;
		ret = Ddi.ddi_pinpad_loadmkdata(devhandle[0], mode, index, key_index, regionid, keyid, len, databuf);
		Log.d("Ddi_jni", "ddi_pinpad_loadmkdata150,ret=" + ret);

		mode = 0x00000000;
		ret = Ddi.ddi_pinpad_closedevice(mode, devhandle);
		Log.d("Ddi_jni", "ddi_pinpad_closedevice,ret = " + ret);
	}

	// pointC
}
